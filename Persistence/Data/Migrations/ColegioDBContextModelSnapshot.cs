// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ColegioDBContext))]
    partial class ColegioDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Archivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPersonaFK")
                        .HasColumnType("int");

                    b.Property<string>("Ruta")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonaFK");

                    b.ToTable("archivo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Boletin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEstudianteFK")
                        .HasColumnType("int");

                    b.Property<int>("Periodo")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstudianteFK");

                    b.ToTable("boletin", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamentoFK")
                        .HasColumnType("int");

                    b.Property<string>("NombreCiudad")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamentoFK");

                    b.ToTable("ciudad", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Corte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Actitudinal")
                        .HasMaxLength(5)
                        .HasColumnType("double");

                    b.Property<double>("AutoEvaluacion")
                        .HasColumnType("double");

                    b.Property<double>("Evaluaciones")
                        .HasColumnType("double");

                    b.Property<int>("IdBoletinFK")
                        .HasColumnType("int");

                    b.Property<int>("IdMateriaFK")
                        .HasColumnType("int");

                    b.Property<int>("IdProfesorFK")
                        .HasColumnType("int");

                    b.Property<double>("Talleres")
                        .HasColumnType("double");

                    b.Property<double>("Tareas")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdBoletinFK");

                    b.HasIndex("IdMateriaFK");

                    b.HasIndex("IdProfesorFK");

                    b.ToTable("corte", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPaisFK")
                        .HasColumnType("int");

                    b.Property<string>("NombreDepartamento")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdPaisFK");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Barrio")
                        .HasColumnType("longtext");

                    b.Property<string>("DireccionEscrita")
                        .HasColumnType("longtext");

                    b.Property<int>("Estrato")
                        .HasColumnType("int");

                    b.Property<int>("IdCiudadFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudadFK");

                    b.ToTable("direccion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdGrupoFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdGrupoFK");

                    b.ToTable("estudiante", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Grado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreGrado")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("grado", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreGrado = "Sexto"
                        },
                        new
                        {
                            Id = 2,
                            NombreGrado = "Septimo"
                        },
                        new
                        {
                            Id = 3,
                            NombreGrado = "Octavo"
                        },
                        new
                        {
                            Id = 4,
                            NombreGrado = "Noveno"
                        },
                        new
                        {
                            Id = 5,
                            NombreGrado = "Decimo"
                        },
                        new
                        {
                            Id = 6,
                            NombreGrado = "Undecimo"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdGradoFK")
                        .HasColumnType("int");

                    b.Property<string>("NombreGrupo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdGradoFK");

                    b.ToTable("grupo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GrupoMateria", b =>
                {
                    b.Property<int>("IdGrupoFK")
                        .HasColumnType("int");

                    b.Property<int>("IdMateriaFK")
                        .HasColumnType("int");

                    b.HasKey("IdGrupoFK", "IdMateriaFK");

                    b.HasIndex("IdMateriaFK");

                    b.ToTable("grupo_materia", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GrupoProfesor", b =>
                {
                    b.Property<int>("IdGrupoFK")
                        .HasColumnType("int");

                    b.Property<int>("IdProfesorFK")
                        .HasColumnType("int");

                    b.HasKey("IdGrupoFK", "IdProfesorFK");

                    b.HasIndex("IdProfesorFK");

                    b.ToTable("grupo_profesor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreMateria")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("materia", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MateriaProfesor", b =>
                {
                    b.Property<int>("IdMateriaFK")
                        .HasColumnType("int");

                    b.Property<int>("IdProfesorFK")
                        .HasColumnType("int");

                    b.HasKey("IdMateriaFK", "IdProfesorFK");

                    b.HasIndex("IdProfesorFK");

                    b.ToTable("materia_profesor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Matricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Contenido")
                        .HasColumnType("longblob");

                    b.Property<int>("IdEstudianteFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstudianteFK");

                    b.ToTable("matricula", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CorteId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<int>("IdTipoNotaFK")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CorteId");

                    b.HasIndex("IdTipoNotaFK");

                    b.ToTable("nota", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Padre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdEstudianteFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstudianteFK");

                    b.ToTable("padre", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombrePais")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .HasColumnType("longtext");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("longtext");

                    b.Property<string>("Documento")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("IdTipoDocumentoFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDocumentoFK");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Especialidad")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Titulacion")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("profesor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuarioFK")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuarioFK");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("rolName");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreRol = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            NombreRol = "Profesor"
                        },
                        new
                        {
                            Id = 3,
                            NombreRol = "Estudiante"
                        },
                        new
                        {
                            Id = 4,
                            NombreRol = "Padre"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreTipo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tipo_documento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreTipo = "Cedula de Ciudadania"
                        },
                        new
                        {
                            Id = 2,
                            NombreTipo = "Tarjeta de Identidad"
                        },
                        new
                        {
                            Id = 3,
                            NombreTipo = "Cédula de Extranjería"
                        },
                        new
                        {
                            Id = 4,
                            NombreTipo = "Pasaporte"
                        },
                        new
                        {
                            Id = 5,
                            NombreTipo = "Permiso Especial de Permanencia (PEP)"
                        },
                        new
                        {
                            Id = 6,
                            NombreTipo = "Permiso de Proteccion Temporak (PPT)"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TipoNota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreTipo")
                        .HasColumnType("longtext");

                    b.Property<double>("ValorPorcentaje")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("tipo_nota", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreTipo = "Actitudinal",
                            ValorPorcentaje = 10.0
                        },
                        new
                        {
                            Id = 2,
                            NombreTipo = "AutoEvaluacion",
                            ValorPorcentaje = 10.0
                        },
                        new
                        {
                            Id = 3,
                            NombreTipo = "Talleres",
                            ValorPorcentaje = 25.0
                        },
                        new
                        {
                            Id = 4,
                            NombreTipo = "Evaluaciones",
                            ValorPorcentaje = 35.0
                        },
                        new
                        {
                            Id = 5,
                            NombreTipo = "Tareas",
                            ValorPorcentaje = 20.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaveUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("CorreoUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<int>("IdRolFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdRolFK");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Archivo", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("Archivos")
                        .HasForeignKey("IdPersonaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.Boletin", b =>
                {
                    b.HasOne("Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Boletines")
                        .HasForeignKey("IdEstudianteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDepartamentoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Domain.Entities.Corte", b =>
                {
                    b.HasOne("Domain.Entities.Boletin", "Boletin")
                        .WithMany("Cortes")
                        .HasForeignKey("IdBoletinFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Materia", "Materia")
                        .WithMany("Cortes")
                        .HasForeignKey("IdMateriaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profesor", "Profesor")
                        .WithMany("Cortes")
                        .HasForeignKey("IdProfesorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boletin");

                    b.Navigation("Materia");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdPaisFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.HasOne("Domain.Entities.Ciudad", "Ciudad")
                        .WithMany("Direcciones")
                        .HasForeignKey("IdCiudadFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithOne("Estudiante")
                        .HasForeignKey("Domain.Entities.Estudiante", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Grupo", "Grupo")
                        .WithMany("Estudiantes")
                        .HasForeignKey("IdGrupoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.Grupo", b =>
                {
                    b.HasOne("Domain.Entities.Grado", "Grado")
                        .WithMany("Grupos")
                        .HasForeignKey("IdGradoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grado");
                });

            modelBuilder.Entity("Domain.Entities.GrupoMateria", b =>
                {
                    b.HasOne("Domain.Entities.Grupo", "Grupo")
                        .WithMany("GrupoMaterias")
                        .HasForeignKey("IdGrupoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Materia", "Materia")
                        .WithMany("GrupoMaterias")
                        .HasForeignKey("IdMateriaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("Domain.Entities.GrupoProfesor", b =>
                {
                    b.HasOne("Domain.Entities.Grupo", "Grupo")
                        .WithMany("GrupoProfesores")
                        .HasForeignKey("IdGrupoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profesor", "Profesor")
                        .WithMany("GrupoProfesores")
                        .HasForeignKey("IdProfesorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Domain.Entities.MateriaProfesor", b =>
                {
                    b.HasOne("Domain.Entities.Materia", "Materia")
                        .WithMany("MateriaProfesores")
                        .HasForeignKey("IdMateriaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profesor", "Profesor")
                        .WithMany("MateriaProfesores")
                        .HasForeignKey("IdProfesorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Materia");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Domain.Entities.Matricula", b =>
                {
                    b.HasOne("Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Matriculas")
                        .HasForeignKey("IdEstudianteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("Domain.Entities.Nota", b =>
                {
                    b.HasOne("Domain.Entities.Corte", null)
                        .WithMany("Notas")
                        .HasForeignKey("CorteId");

                    b.HasOne("Domain.Entities.TipoNota", "TipoNota")
                        .WithMany("Notas")
                        .HasForeignKey("IdTipoNotaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoNota");
                });

            modelBuilder.Entity("Domain.Entities.Padre", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithOne("Padre")
                        .HasForeignKey("Domain.Entities.Padre", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Padres")
                        .HasForeignKey("IdEstudianteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.HasOne("Domain.Entities.Direccion", "Direccion")
                        .WithOne("Persona")
                        .HasForeignKey("Domain.Entities.Persona", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithOne("Persona")
                        .HasForeignKey("Domain.Entities.Persona", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Personas")
                        .HasForeignKey("IdTipoDocumentoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direccion");

                    b.Navigation("TipoDocumento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Profesor", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithOne("Profesor")
                        .HasForeignKey("Domain.Entities.Profesor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUsuarioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRolFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Domain.Entities.Boletin", b =>
                {
                    b.Navigation("Cortes");
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Domain.Entities.Corte", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.Navigation("Boletines");

                    b.Navigation("Matriculas");

                    b.Navigation("Padres");
                });

            modelBuilder.Entity("Domain.Entities.Grado", b =>
                {
                    b.Navigation("Grupos");
                });

            modelBuilder.Entity("Domain.Entities.Grupo", b =>
                {
                    b.Navigation("Estudiantes");

                    b.Navigation("GrupoMaterias");

                    b.Navigation("GrupoProfesores");
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.Navigation("Cortes");

                    b.Navigation("GrupoMaterias");

                    b.Navigation("MateriaProfesores");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Navigation("Archivos");

                    b.Navigation("Estudiante");

                    b.Navigation("Padre");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Domain.Entities.Profesor", b =>
                {
                    b.Navigation("Cortes");

                    b.Navigation("GrupoProfesores");

                    b.Navigation("MateriaProfesores");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.TipoNota", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Persona");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
